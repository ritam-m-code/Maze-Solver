/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw2(PApplet appc, GWinData data) { //_CODE_:window1:768295:
  appc.background(230);
} //_CODE_:window1:768295:

public void densitySliderChanged(GCustomSlider source, GEvent event) { //_CODE_:densitySlider:846323:
  wallChance = densitySlider.getValueI();
 
    resetButtons();
    loop();
    m.setMaze();
 
} //_CODE_:densitySlider:846323:

public void frameRateSliderChanged(GCustomSlider source, GEvent event) { //_CODE_:frameRateSlider:518536:
  frameRate(frameRateSlider.getValueI());
} //_CODE_:frameRateSlider:518536:

public void resetButtonClicked(GButton source, GEvent event) { //_CODE_:resetButton:743378:
    resetButtons();
    loop();
    m.setMaze();
} //_CODE_:resetButton:743378:

public void stopSolveClicked(GButton source, GEvent event) { //_CODE_:stopSolve:806207:
    m.reSolve();
    resetButtons();
    redraw();
} //_CODE_:stopSolve:806207:

public void pauseButtonClicked(GButton source, GEvent event) { //_CODE_:pauseButton:403589:
  storeTime = millis();
  noLoop();
} //_CODE_:pauseButton:403589:

public void resumeButtonClicked(GButton source, GEvent event) { //_CODE_:resumeButton:940788:
  loop();
  subtractTime += (millis()-storeTime);
  //storeTime = 0;
} //_CODE_:resumeButton:940788:

public void solveButtonClicked(GButton source, GEvent event) { //_CODE_:solveButton:929107:
    m.createStartEnd(); 
    solving = true;
    startTime = millis();
   
   if(algoName == "Djikstra's Algorithm"){
     selectedAlgo = "DJK";
     showData = true;
     dijkstraPath(m, new PVector(0, 0), new PVector(rows - 1, cols - 1));
     endText = "algorithm found a solution!";
     }
   
   else if(algoName == "Recursive Solver"){
     selectedAlgo = "RS";
     showData = true;
     recursiveSolver(0,0, m);
     endText = "algorithm found a solution!";
     }
   
   else if(algoName == "Right Hand Follower"){
     selectedAlgo = "RHF";
     showData = true;
     solving = true;
     boolean solved =  rightHandFollower(m, 0, 0, 0, solutionPath);
    
   if(solved){ endText = "algorithm found a solution!";}
     else{ 
     endText = "Maze could not be solved with this primative algorithm";
     showData = false;
     }
   }
} //_CODE_:solveButton:929107:

public void djkCheckClicked(GCheckbox source, GEvent event) { //_CODE_:djkCheck:811577:
      
  clicks_djk++;
      
  clicks_rhf = 0;
  clicks_rs = 0;
      
  rsCheck.setSelected(false);
  rhfCheck.setSelected(false);

if(clicks_djk%2 == 1){ 
     
  rsCheck.setSelected(false);
  rhfCheck.setSelected(false);
  loop();
     
  showData = false;
  algoName = "Djikstra's Algorithm";
  algoDes = djkDes;
  currentStep = 0;
  m.reSolve();
  endText = "Click Solve to view solution!";
  redraw();
  }
  
else{
 noLoop();
 algoName = "";
 algoDes = "";
 m.reSolve();
 redraw(); 
  }
} //_CODE_:djkCheck:811577:

public void rhfCheckClicked(GCheckbox source, GEvent event) { //_CODE_:rhfCheck:637885:

  clicks_rhf++;
  
  clicks_djk = 0;
  clicks_rs = 0;
      
  rsCheck.setSelected(false);
  djkCheck.setSelected(false);
  
if(clicks_rhf%2 == 1){
     
  loop();
  showData = false;
  algoName = "Right Hand Follower";
  algoDes = rhfDes;
  currentStep = 0;
  m.reSolve(); // Clear previous solution data
    
  startTime = millis();
  endText = "Click Solve to view solution!";
  redraw();
  }
  
else{
  
 noLoop();
 algoName = "";
 algoDes = "";
 m.reSolve();
 redraw(); 
  }
} //_CODE_:rhfCheck:637885:

public void rsCheckClicked(GCheckbox source, GEvent event) { //_CODE_:rsCheck:924000:

    clicks_rs++;

    clicks_rhf = 0;
      clicks_djk = 0;

     djkCheck.setSelected(false);
     rhfCheck.setSelected(false);

if(clicks_rs%2 == 1){
    loop();
    showData = false;
    algoName = "Recursive Solver";
    algoDes = rsDes;
    currentStep = 0;
    m.reSolve();
    startTime = millis();
    endText = "Click Solve to view solution!";
    redraw();
    }

else{
  noLoop();
  algoName = "";
  algoDes = "";
  m.reSolve();
  redraw();
  }
} //_CODE_:rsCheck:924000:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  window1 = GWindow.getWindow(this, "Window title", 0, 0, 400, 300, JAVA2D);
  window1.noLoop();
  window1.setActionOnClose(G4P.KEEP_OPEN);
  window1.addDrawHandler(this, "win_draw2");
  densitySlider = new GCustomSlider(window1, 293, 260, 100, 40, "grey_blue");
  densitySlider.setShowValue(true);
  densitySlider.setLimits(80, 0, 100);
  densitySlider.setNbrTicks(10);
  densitySlider.setNumberFormat(G4P.INTEGER, 0);
  densitySlider.setOpaque(false);
  densitySlider.addEventHandler(this, "densitySliderChanged");
  label1 = new GLabel(window1, 301, 241, 80, 20);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Wall Density");
  label1.setOpaque(false);
  frameRateSlider = new GCustomSlider(window1, 156, 259, 100, 40, "grey_blue");
  frameRateSlider.setShowValue(true);
  frameRateSlider.setLimits(20, 5, 60);
  frameRateSlider.setNbrTicks(5);
  frameRateSlider.setNumberFormat(G4P.INTEGER, 0);
  frameRateSlider.setOpaque(false);
  frameRateSlider.addEventHandler(this, "frameRateSliderChanged");
  label2 = new GLabel(window1, 161, 242, 80, 20);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("Framerate");
  label2.setOpaque(false);
  resetButton = new GButton(window1, 31, 254, 84, 36);
  resetButton.setText("Reset Maze");
  resetButton.setLocalColorScheme(GCScheme.YELLOW_SCHEME);
  resetButton.addEventHandler(this, "resetButtonClicked");
  stopSolve = new GButton(window1, 31, 210, 84, 36);
  stopSolve.setText("Stop Solve");
  stopSolve.setLocalColorScheme(GCScheme.RED_SCHEME);
  stopSolve.addEventHandler(this, "stopSolveClicked");
  pauseButton = new GButton(window1, 31, 100, 84, 36);
  pauseButton.setText("Pause");
  pauseButton.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
  pauseButton.addEventHandler(this, "pauseButtonClicked");
  resumeButton = new GButton(window1, 31, 144, 84, 36);
  resumeButton.setText("Resume");
  resumeButton.addEventHandler(this, "resumeButtonClicked");
  solveButton = new GButton(window1, 31, 46, 84, 36);
  solveButton.setText("Solve");
  solveButton.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  solveButton.addEventHandler(this, "solveButtonClicked");
  djkCheck = new GCheckbox(window1, 210, 67, 120, 40);
  djkCheck.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  djkCheck.setText("Djikstra's Algorithm");
  djkCheck.setLocalColorScheme(GCScheme.GOLD_SCHEME);
  djkCheck.setOpaque(false);
  djkCheck.addEventHandler(this, "djkCheckClicked");
  rhfCheck = new GCheckbox(window1, 210, 113, 120, 40);
  rhfCheck.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  rhfCheck.setText("Right Turn Algorithm");
  rhfCheck.setLocalColorScheme(GCScheme.GOLD_SCHEME);
  rhfCheck.setOpaque(false);
  rhfCheck.addEventHandler(this, "rhfCheckClicked");
  rsCheck = new GCheckbox(window1, 210, 160, 120, 40);
  rsCheck.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  rsCheck.setText("Recursive Solver Algorithm");
  rsCheck.setLocalColorScheme(GCScheme.GOLD_SCHEME);
  rsCheck.setOpaque(false);
  rsCheck.addEventHandler(this, "rsCheckClicked");
  algoNames = new GLabel(window1, 210, 36, 80, 19);
  algoNames.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  algoNames.setText("Algorithms:");
  algoNames.setOpaque(false);
  topLabel = new GLabel(window1, 160, 6, 80, 20);
  topLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  topLabel.setText("Control Panel");
  topLabel.setOpaque(false);
  window1.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window1;
GCustomSlider densitySlider; 
GLabel label1; 
GCustomSlider frameRateSlider; 
GLabel label2; 
GButton resetButton; 
GButton stopSolve; 
GButton pauseButton; 
GButton resumeButton; 
GButton solveButton; 
GCheckbox djkCheck; 
GCheckbox rhfCheck; 
GCheckbox rsCheck; 
GLabel algoNames; 
GLabel topLabel; 
